generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNSPECIFIED
}

enum AccountType {
  PERSONAL
  BUSINESS
  CREATOR
}

enum PrivacySetting {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

model User {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  email        String  @unique
  passwordHash String
  phone        String?

  accountType        AccountType    @default(PERSONAL)
  privacySettings    PrivacySetting @default(PUBLIC)
  verificationStatus Boolean        @default(false)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastActiveAt DateTime?
  isActive     Boolean   @default(true)
  isDeleted    Boolean   @default(false)

  // üîó Relations
  userInfo      UserInfo?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  shares        Share[]
  followers     Follow[]                  @relation("followers")
  following     Follow[]                  @relation("following")
  sentMessages  Message[]                 @relation("sentMessages")
  conversations ConversationParticipant[]
  sessions      UserSession[]
  stories       Story[]
  systemLogs    SystemLogs[]
}

model UserInfo {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  firstName   String?
  middleName  String?
  lastName    String?
  displayName String?
  bio         String?

  profilePictureUrl String?
  coverPhotoUrl     String?

  birthDate DateTime?
  gender    Gender?
  location  String?

  // üîó Relation
  user User @relation(fields: [userId], references: [id])
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @unique @db.VarChar(255)
  deviceInfo   String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id             String         @id @default(cuid()) @db.VarChar(32)
  userId         Int
  contentType    ContentType
  caption        String?        @db.VarChar(2000)
  thumbnailUrl   String?        @db.VarChar(500)
  location       String?        @db.VarChar(100)
  taggedUsers    String?
  privacyLevel   PrivacySetting @default(PUBLIC)
  allowsComments Boolean        @default(true)
  allowsShares   Boolean        @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  isDeleted Boolean   @default(false)

  user     User          @relation(fields: [userId], references: [id])
  images   PostImage[]
  comments Comment[]
  likes    Like[]
  shares   Share[]
  hashtags PostHashtag[]
}

model PostImage {
  id           Int     @id @default(autoincrement())
  postId       String  @db.VarChar(32)
  imageUrl     String  @db.VarChar(500)
  altText      String? @db.VarChar(200)
  displayOrder Int     @default(0)
  width        Int?
  height       Int?
  fileSize     Int?

  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([postId, displayOrder])
}

model Comment {
  id              Int    @id @default(autoincrement())
  postId          String @db.VarChar(32)
  userId          Int
  parentCommentId Int?

  content   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post          Post      @relation(fields: [postId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    String   @db.VarChar(32)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Share {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    String   @db.VarChar(32)
  caption   String? // Optional caption when sharing
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  status      String   @default("accepted") // pending / accepted / blocked
  createdAt   DateTime @default(now())

  follower  User @relation("followers", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

// üè∑Ô∏è Hashtag Models
model Hashtag {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100) // e.g., "travel", "food"
  createdAt  DateTime @default(now())
  usageCount Int      @default(0) // Track how many times it's been used
  isActive   Boolean  @default(true) // For moderation purposes

  posts PostHashtag[] // Many-to-many relation with posts

  @@index([name])
  @@index([usageCount])
}

model PostHashtag {
  id        Int      @id @default(autoincrement())
  postId    String   @db.VarChar(32)
  hashtagId Int
  createdAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@unique([postId, hashtagId])
  @@index([postId])
  @@index([hashtagId])
}

model Conversation {
  id            Int       @id @default(autoincrement())
  type          String    @default("direct") // or group later
  name          String?
  createdBy     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?
  isArchived    Boolean   @default(false)

  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             Int       @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?
  role           String    @default("member")

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
}

model Message {
  id                 Int         @id @default(autoincrement())
  conversationId     Int
  senderId           Int
  content            String
  messageType        MessageType @default(TEXT)
  mediaUrl           String?
  repliedToMessageId Int?
  deliveryStatus     String      @default("delivered")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isDeleted          Boolean     @default(false)

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation("sentMessages", fields: [senderId], references: [id])
  replyTo      Message?     @relation("Replies", fields: [repliedToMessageId], references: [id])
  replies      Message[]    @relation("Replies")
}

model Story {
  id              Int      @id @default(autoincrement())
  userId          Int
  mediaUrl        String
  caption         String?
  location        String?
  backgroundColor String?
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  viewCount       Int      @default(0)
  allowsReplies   Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])
}

// System Logs
model SystemLogs {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  level      LogLevel
  source     String   @db.VarChar(100)
  message    String   @db.Text
  context    Json?
  userId     Int?
  sessionId  String?  @db.VarChar(255)
  requestId  String?  @db.VarChar(64)
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?  @db.Text
  stackTrace String?  @db.Text

  // üîó Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([userId])
  @@index([sessionId])
  @@index([requestId])
}
